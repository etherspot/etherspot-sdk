# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Account {
  address: String!
  createdAt: DateTime!
  ensNode: ENSNode
  metadata: AccountMetadata
  state: AccountStates
  store: AccountStores
  type: AccountTypes
  updatedAt: DateTime!
}

type AccountBalance {
  balance: BigNumber!
  token: String
}

type AccountBalances {
  items: [AccountBalance!]!
}

type AccountMember {
  account: Account!
  createdAt: DateTime!
  member: Account!
  state: AccountMemberStates!
  store: AccountMemberStores
  type: AccountMemberTypes
  updatedAt: DateTime!
}

type AccountMembers {
  currentPage: Int!
  items: [AccountMember!]!
  nextPage: Int
}

type AccountMetadata {
  account: Account!
  createdAt: DateTime!
  email: String
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  phone: String
  updatedAt: DateTime!
}

type AccountProof {
  createdAt: DateTime!
  hash: String!
  state: AccountProofStates!
  updatedAt: DateTime!
}

type Accounts {
  currentPage: Int!
  items: [Account!]!
  nextPage: Int
}

type BlockStats {
  currentOnchainBlockNumber: Int
  lastProcessedBlockNumber: Int
}

type ENSNode {
  address: String!
  createdAt: DateTime
  guardianSignature: String
  hash: String!
  label: String
  name: String
  state: ENSNodeStates
  type: ENSNodeTypes
  updatedAt: DateTime
}

type EstimatedRelayedTransaction {
  gasLimit: Int!
  gasPrice: BigNumber!
  refundAmount: BigNumber!
  refundToken: String
  totalCost: BigNumber!
}

type Mutation {
  activatePaymentHubBridge(acceptedChainId: Int!, acceptedToken: String, chainId: Int, hub: String!, token: String): PaymentHubBridge!
  callProject(chainId: Int, payload: JSONObject, sender: String!): ProjectResponse!
  createENSSubNode(address: String!, chainId: Int, name: String!): ENSNode!
  createPaymentHubPayment(chainId: Int, hub: String!, recipient: String!, sender: String!, token: String, value: BigNumber!): PaymentHubPayment!
  createSession(account: String!, chainId: Int, code: String!, fcmToken: String, signature: String!, ttl: Int): Session!
  createSessionCode(account: String!, chainId: Int): String!
  deactivatePaymentHubBridge(acceptedChainId: Int!, acceptedToken: String, chainId: Int, hub: String!, token: String): PaymentHubBridge!
  destroySession(chainId: Int): Boolean!
  estimateRelayedTransaction(account: String!, chainId: Int, data: [String!]!, refundToken: String, sender: String!, to: [String!]!): EstimatedRelayedTransaction!
  sendRelayedTransaction(account: String!, chainId: Int, data: [String!]!, gasPrice: BigNumber!, senderSignature: String!, to: [String!]!): RelayedTransaction!
  signP2PPaymentChannel(chainId: Int, hash: String!, senderSignature: String!): P2PPaymentChannel!
  syncAccount(chainId: Int): Account!
  syncAccountMember(account: String!, chainId: Int): AccountMember!
  syncPaymentDeposits(chainId: Int, owner: String!, tokens: [String!] = []): P2PPaymentDeposits!
  touchSession(chainId: Int): Boolean!
  transferPaymentHubDeposit(chainId: Int, hub: String!, sender: String!, targetChainId: Int!, targetHub: String, targetToken: String, token: String, value: BigNumber!): PaymentHubDeposit!
  updateAccountMetadata(account: String!, chainId: Int, email: String, phone: String): AccountMetadata!
  updateP2PPaymentChannel(blockNumber: Int!, chainId: Int, recipient: String!, sender: String!, senderSignature: String!, token: String, totalAmount: BigNumber!, uid: String!): P2PPaymentChannel!
  updatePaymentHub(chainId: Int, hub: String!, liquidity: BigNumber!, token: String): PaymentHub!
  updatePaymentHubDeposit(blockNumber: Int!, chainId: Int, hub: String!, sender: String!, senderSignature: String, token: String, totalAmount: BigNumber): PaymentHubDeposit!
  updateProject(chainId: Int, endpoint: String!, key: String!, owner: String!, privateKey: String!): Project!
}

type Network {
  chainId: Int!
  name: NetworkNames!
}

type Notification {
  payload: JSONObject
  recipient: String!
  type: NotificationTypes!
}

type P2PPaymentChannel {
  committedAmount: BigNumber!
  createdAt: DateTime!
  hash: String!
  latestPayment: P2PPaymentChannelPayment
  recipient: String!
  sender: String!
  state: P2PPaymentChannelStates!
  token: String
  totalAmount: BigNumber!
  uid: String!
  updatedAt: DateTime!
}

type P2PPaymentChannelPayment {
  blockNumber: Int!
  createdAt: DateTime!
  guardianSignature: String
  senderSignature: String
  state: P2PPaymentChannelPaymentStates!
  totalAmount: BigNumber!
  updatedAt: DateTime!
  value: BigNumber!
}

type P2PPaymentChannelPayments {
  currentPage: Int!
  items: [P2PPaymentChannelPayment!]!
  nextPage: Int
}

type P2PPaymentChannels {
  currentPage: Int!
  items: [P2PPaymentChannel!]!
  nextPage: Int
}

type P2PPaymentDeposit {
  address: String!
  availableAmount: BigNumber!
  createdAt: DateTime
  lockedAmount: BigNumber!
  owner: String!
  pendingAmount: BigNumber!
  state: P2PPaymentDepositStates!
  token: String
  totalAmount: BigNumber!
  updatedAt: DateTime
}

type P2PPaymentDeposits {
  items: [P2PPaymentDeposit!]!
}

type PaymentHub {
  address: String!
  createdAt: DateTime
  liquidity: BigNumber!
  token: String
  updatedAt: DateTime
}

type PaymentHubBridge {
  acceptedChainId: Int!
  acceptedToken: String
  createdAt: DateTime
  hub: PaymentHub!
  state: PaymentHubBridgeStates!
  updatedAt: DateTime
}

type PaymentHubBridges {
  currentPage: Int!
  items: [PaymentHubBridge!]!
  nextPage: Int
}

type PaymentHubDeposit {
  createdAt: DateTime
  hub: PaymentHub!
  owner: String!
  totalAmount: BigNumber!
  updatedAt: DateTime
}

type PaymentHubDeposits {
  currentPage: Int!
  items: [PaymentHubDeposit!]!
  nextPage: Int
}

type PaymentHubPayment {
  createdAt: DateTime!
  hash: String!
  hub: PaymentHub!
  recipient: String
  sender: String
  value: BigNumber!
}

type PaymentHubPayments {
  currentPage: Int!
  items: [PaymentHubPayment!]!
  nextPage: Int
}

type PaymentHubs {
  currentPage: Int!
  items: [PaymentHub!]!
  nextPage: Int
}

type Project {
  address: String!
  createdAt: DateTime
  key: String!
  owner: String!
  state: ProjectStates!
  updatedAt: DateTime
}

type ProjectResponse {
  data: JSONObject
}

type Projects {
  currentPage: Int!
  items: [Project!]!
  nextPage: Int
}

type Query {
  account(account: String!, chainId: Int): Account
  accountBalances(account: String!, chainId: Int, tokens: [String!] = []): AccountBalances!
  accountMember(account: String!, chainId: Int, member: String!): AccountMember
  accountMembers(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): AccountMembers!
  accounts(chainId: Int, limit: Int = 10, page: Int = 1): Accounts!
  blockStats(chainId: Int): BlockStats!
  defaultNetwork: Network!
  ensNode(chainId: Int, nameOrHashOrAddress: String!): ENSNode
  p2pPaymentChannel(chainId: Int, hash: String!): P2PPaymentChannel
  p2pPaymentChannelPayments(chainId: Int, channel: String!, limit: Int = 10, page: Int = 1): P2PPaymentChannelPayments!
  p2pPaymentChannels(chainId: Int, limit: Int = 10, page: Int = 1, senderOrRecipient: String!, token: String): P2PPaymentChannels!
  paymentHub(chainId: Int, hub: String!, token: String): PaymentHub
  paymentHubBridge(acceptedChainId: Int!, acceptedToken: String, chainId: Int, hub: String!, token: String): PaymentHubBridge
  paymentHubBridges(acceptedChainId: Int, chainId: Int, hub: String!, limit: Int = 10, page: Int = 1, token: String): PaymentHubBridges!
  paymentHubDeposit(chainId: Int, hub: String!, owner: String!, token: String): PaymentHubDeposit
  paymentHubDeposits(chainId: Int, hub: String!, limit: Int = 10, owner: String!, page: Int = 1, tokens: [String!] = []): PaymentHubDeposits!
  paymentHubPayment(hash: String!): PaymentHubPayment
  paymentHubPayments(chainId: Int, hub: String!, limit: Int = 10, owner: String!, page: Int = 1, senderOrRecipient: String, token: String): PaymentHubPayments!
  paymentHubs(chainId: Int, hub: String, limit: Int = 10, page: Int = 1, token: String): PaymentHubs
  project(chainId: Int, key: String!): Project
  projects(chainId: Int, limit: Int = 10, owner: String!, page: Int = 1): Projects!
  relayedAccount(address: String!, chainId: Int): RelayedAccount
  relayedTransaction(chainId: Int, key: String!): RelayedTransaction
  relayedTransactions(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): RelayedTransactions!
  supportedNetworks: [Network!]!
  transaction(chainId: Int, hash: String!): Transaction
  transactions(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): Transactions!
  validateENSLabel(label: String!): Boolean!
}

type RelayedAccount {
  address: String!
  nonce: BigNumber!
}

type RelayedTransaction {
  account: String!
  createdAt: DateTime!
  encodedData: String!
  gasLimit: Int!
  gasPrice: BigNumber!
  hash: String
  key: String!
  refundAmount: BigNumber!
  refundToken: String
  sender: String
  state: RelayedTransactionStates!
  updatedAt: DateTime!
}

type RelayedTransactions {
  currentPage: Int!
  items: [RelayedTransaction!]!
  nextPage: Int
}

type Session {
  account: Account!
  token: String!
  ttl: Int!
}

type Subscription {
  newNotification(address: String!, chainId: Int): Notification
}

type Transaction {
  accountFrom: String
  accountTo: String
  blockNumber: Int
  createdAt: DateTime!
  encodedData: String!
  fee: BigNumber!
  from: String!
  gasLimit: Int!
  gasPrice: BigNumber!
  gasToken: String
  gasUsed: Int
  hash: String!
  index: Int!
  metadata: String
  state: TransactionStates!
  to: String!
  type: TransactionTypes!
  updatedAt: DateTime!
  value: BigNumber!
}

type Transactions {
  currentPage: Int!
  items: [Transaction!]!
  nextPage: Int
}

enum AccountMemberStates {
  Added
  Removed
}

enum AccountMemberStores {
  AccountOwnerRegistry
  PersonalAccountRegistry
}

enum AccountMemberTypes {
  Owner
}

enum AccountProofStates {
  Added
  Removed
}

enum AccountStates {
  Deployed
  UnDeployed
}

enum AccountStores {
  PersonalAccountRegistry
}

enum AccountTypes {
  Contract
  Key
}

enum ENSNodeStates {
  Claimed
  Reserved
}

enum ENSNodeTypes {
  Root
  Sub
}

enum NetworkNames {
  Goerli
  Kovan
  LocalA
  LocalB
  Mainnet
  Rinkeby
  Ropsten
  Xdai
}

enum NotificationTypes {
  AccountMemberCreated
  AccountMemberUpdated
  AccountUpdated
  ENSSubNodeCreated
  ENSSubNodeUpdated
  P2PPaymentChannelCreated
  P2PPaymentChannelUpdated
  PaymentHubBridgeCreated
  PaymentHubBridgeUpdated
  PaymentHubCreated
  PaymentHubDepositCreated
  PaymentHubDepositUpdated
  PaymentHubPaymentCreated
  PaymentHubUpdated
  RelayedTransactionCreated
  RelayedTransactionUpdated
}

enum P2PPaymentChannelPaymentStates {
  Committed
  Created
  Expired
  Signed
}

enum P2PPaymentChannelStates {
  Endangered
  Opened
  Signed
}

enum P2PPaymentDepositStates {
  Locked
  Unlocked
}

enum PaymentHubBridgeStates {
  Active
  Inactive
}

enum ProjectStates {
  Active
  Inactive
}

enum RelayedTransactionStates {
  Canceled
  Pending
  Queued
  Reverted
  Sent
}

enum TransactionStates {
  Canceled
  Confirmed
  Reverted
}

enum TransactionTypes {
  ContractCall
  Erc20
  EthTransfer
}


"BigNumber.js"
scalar BigNumber

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"JSONObject"
scalar JSONObject
