# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Account {
  address: String!
  chainId: Int!
  createdAt: DateTime!
  ensNode: ENSNode
  metadata: AccountMetadata
  state: AccountStates
  store: AccountStores
  type: AccountTypes
  updatedAt: DateTime!
}

type AccountBalance {
  superBalance: BigNumber
  balance: BigNumber!
  token: String
}

type AccountBalances {
  items: [AccountBalance!]!
}

type AccountInvestment {
  name: String
  network: String
  balance: BigNumber!
  position: Int!
  logoURI: String!
}

type AccountInvestments {
  items: [AccountInvestment!]!
}

type NetCurveBalance {
  timestamp: number
  usdValue: number
}

type NetCurveBalances {
  items: [NetCurveBalance!]!
}

type AccountDashboardChange {
  balance: Float!
  netChange: Float!
}

type AccountDashboardDataPoint {
  balance: Float!
  timestamp: String!
}

type AccountMember {
  account: Account!
  createdAt: DateTime!
  member: Account!
  state: AccountMemberStates!
  store: AccountMemberStores
  type: AccountMemberTypes
  updatedAt: DateTime!
}

type AccountMembers {
  currentPage: Int!
  items: [AccountMember!]!
  nextPage: Int
  total: Int
}

type AccountMetadata {
  account: Account!
  createdAt: DateTime!
  email: String
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  phone: String
  updatedAt: DateTime!
}

type AccountProof {
  createdAt: DateTime!
  hash: String!
  state: AccountProofStates!
  updatedAt: DateTime!
}

type AccountSettings {
  account: Account!
  createdAt: DateTime!
  defaultTokenListName: String
  delayTransactions: Int
  fcmToken: String
  updatedAt: DateTime!
}

type AccountTotalBalances {
  totalBalances: [AccountTotalBalancesItem!]!
}

type AccountTotalBalancesItem {
  balances: [AccountTotalBalancesMetadata!]!
  category: AccountTotalBalancesCategories
  chainId: Float!
  totalBalance: Float
}

type AccountTotalBalancesMetadata {
  address: String
  iconUrl: String
  key: String!
  protocol: String
  serviceTitle: String
  share: Float
  title: String!
  tokenAddress: String
  value: Float!
}

type Accounts {
  currentPage: Int!
  items: [Account!]!
  nextPage: Int
  total: Int
}

type BlockStats {
  currentBlockNumber: Int
  lastProcessedBlockNumber: Int
  reConsumeBlockNumber: Int
}

type BridgeAsset {
  address: String!
  chainId: Int!
  decimals: Int!
  icon: String!
  name: String!
  symbol: String!
}

type BridgeInfo {
  icon: String
  serviceTime: Int!
}

type BridgeRoute {
  bridgeInfo: BridgeInfo!
  bridgeName: String!
  fromAsset: BridgeAsset!
  fromChainId: Int!
  inputAmount: BigNumber!
  outputAmount: BigNumber!
  toAsset: BridgeAsset!
  toChainId: Int!
}

type ENSAddresses {
  items: [String]!
}

type ENSNames {
  items: [String]!
}

type ENSNode {
  address: String!
  createdAt: DateTime
  guardianSignature: String
  hash: String!
  label: String
  name: String
  rootNode: ENSRootNode
  state: ENSNodeStates
  updatedAt: DateTime
  zone: ENSNodeZones!
}

type ENSRootNode {
  createdAt: DateTime!
  hash: String!
  name: String
  state: ENSRootNodeStates!
  updatedAt: DateTime!
}

type ENSRootNodes {
  currentPage: Int!
  items: [ENSRootNode!]!
  nextPage: Int
  total: Int
}

type ExchangeOffer {
  exchangeRate: Float!
  provider: ExchangeProviders!
  receiveAmount: BigNumber!
  transactions: [SendTransaction!]!
}

type ExchangeOffers {
  items: [ExchangeOffer!]!
}

type GatewayBatch {
  account: String!
  createdAt: DateTime
  data: [String!]!
  delayedUntil: DateTime
  estimatedGas: Int!
  estimatedGasPrice: BigNumber!
  feeAmount: BigNumber!
  feeData: String!
  feeToken: String
  hash: String!
  logs: [TransactionLog!]!
  nonce: Int!
  refundAmount: BigNumber!
  refundData: String!
  refundToken: String
  senderSignature: String!
  state: GatewayBatchStates!
  to: [String!]!
  transaction: GatewayTransaction
  updatedAt: DateTime
}

type GatewayBatches {
  currentPage: Int!
  items: [GatewayBatch!]!
  nextPage: Int
  total: Int
}

type GatewayEstimatedBatch {
  createdAt: DateTime!
  estimatedGas: Int!
  estimatedGasPrice: BigNumber!
  expiredAt: DateTime!
  feeAmount: BigNumber!
  feeTokenReceiver: String
  refundAmount: BigNumber!
  refundTokenPayee: String
  signature: String!
}

type GatewayEstimatedKnownOp {
  estimatedGas: Int!
  estimatedGasPrice: BigNumber!
  feeAmount: BigNumber!
}

type GatewayGasInfo {
  fast: BigNumber!
  instant: BigNumber!
  standard: BigNumber!
}

type GatewaySender {
  address: String!
  balance: BigNumber!
  createdAt: DateTime!
  nonce: Float!
  state: GatewaySenderStates!
  updatedAt: DateTime!
}

type GatewaySenders {
  items: [GatewaySender!]!
}

type GatewaySupportedToken {
  address: String!
  exchangeRate: Float!
}

type GatewaySupportedTokens {
  items: [GatewaySupportedToken!]!
}

type GatewayTransaction {
  batches: [GatewayBatch!]!
  blockNumber: Int
  chainId: Int!
  createdAt: DateTime!
  gasLimit: Float!
  gasPrice: BigNumber!
  gasUsed: Int
  hash: String!
  id: Int!
  internalTransactions: [InternalTransaction!]!
  internalTransactionsFetched: Boolean!
  sender: String
  state: GatewayTransactionStates!
  timestamp: Int
  totalCost: BigNumber!
  updatedAt: DateTime!
}

type InternalTransaction {
  from: String!
  to: String!
  value: BigNumber!
}

type MovrFee {
  amount: BigNumber!
  assetAddress: String!
}

type MovrFees {
  bridgeFee: MovrFee!
  gasLimit: MovrFee!
}

type MovrRoute {
  bridgeRoute: BridgeRoute!
  fees: MovrFees!
  useMiddleware: Boolean!
}

type Mutation {
  activatePaymentHubBridge(
    acceptedChainId: Int!
    acceptedToken: String
    chainId: Int
    hub: String!
    token: String
  ): PaymentHubBridge!
  callContract(chainId: Int, data: String!, to: String!): String!
  callProject(chainId: Int, payload: JSONObject, sender: String!): ProjectResponse!
  cancelGatewayBatch(account: String!, chainId: Int, hash: String!): GatewayBatch!
  createPaymentHubPayment(
    chainId: Int
    hub: String!
    recipient: String!
    sender: String!
    token: String
    value: BigNumber!
  ): PaymentHubPayment!
  createSession(account: String!, chainId: Int, code: String!, fcmToken: String, signature: String!, ttl: Int): Session!
  createSessionCode(account: String!, chainId: Int): String!
  deactivatePaymentHubBridge(
    acceptedChainId: Int!
    acceptedToken: String
    chainId: Int
    hub: String!
    token: String
  ): PaymentHubBridge!
  destroySession(chainId: Int): Boolean!
  estimateGatewayBatch(
    account: String!
    chainId: Int
    data: [String!]!
    feeToken: String
    nonce: Int!
    refundToken: String
    to: [String!]!
  ): GatewayEstimatedBatch!
  estimateGatewayKnownOp(
    account: String!
    chainId: Int
    feeToken: String
    op: GatewayKnownOps!
  ): GatewayEstimatedKnownOp!
  forceGatewayBatch(account: String!, chainId: Int, hash: String!): GatewayBatch!
  p2pPaymentDepositWithdrawals(
    chainId: Int
    limit: Int = 10
    owner: String!
    page: Int = 1
    token: String
  ): P2PPaymentDeposits!
  reserveENSNode(address: String!, chainId: Int, name: String!): ENSNode!
  signP2PPaymentChannel(chainId: Int, hash: String!, senderSignature: String!): P2PPaymentChannel!
  submitGatewayBatch(
    account: String!
    chainId: Int
    data: [String!]!
    estimatedGas: Int!
    estimatedGasPrice: BigNumber!
    estimationExpiredAt: DateTime!
    estimationSignature: String!
    feeAmount: BigNumber
    feeToken: String
    nonce: Int!
    refundAmount: BigNumber
    refundToken: String
    senderSignature: String!
    to: [String!]!
  ): GatewayBatch!
  syncAccount(chainId: Int): Account!
  syncAccountMember(account: String!, chainId: Int): AccountMember!
  syncP2PPaymentDeposits(chainId: Int, owner: String!, tokens: [String!] = []): P2PPaymentDeposits!
  topUpAccount(account: String!, chainId: Int): String
  topUpPaymentDepositAccount(account: String!, chainId: Int): String
  touchSession(chainId: Int): Boolean!
  transferPaymentHubDeposit(
    chainId: Int
    hub: String!
    sender: String!
    targetChainId: Int!
    targetHub: String
    targetToken: String
    token: String
    value: BigNumber!
  ): PaymentHubDeposit!
  updateAccountMetadata(account: String!, chainId: Int, email: String, phone: String): AccountMetadata!
  updateAccountSettings(account: String!, chainId: Int, delayTransactions: Int, fcmToken: String): AccountSettings!
  updateP2PPaymentChannel(
    blockNumber: Int!
    chainId: Int
    recipient: String!
    sender: String!
    senderSignature: String!
    token: String
    totalAmount: BigNumber!
    uid: String!
  ): P2PPaymentChannel!
  updateP2PPaymentDeposit(chainId: Int, owner: String!, token: String, totalAmount: BigNumber): P2PPaymentDeposit
  updatePaymentHub(chainId: Int, hub: String!, liquidity: BigNumber!, token: String): PaymentHub!
  updatePaymentHubDeposit(
    blockNumber: Int!
    chainId: Int
    hub: String!
    sender: String!
    senderSignature: String
    token: String
    totalAmount: BigNumber
  ): PaymentHubDeposit!
}

type NativeCurrencies {
  items: [NativeCurrenciesItem!]!
}

type NameResolutionsNodes {
  results: [NameResolutionSupportedZones!]!
  failed: Boolean
  message: String
}

type NameResolutionSupportedZones {
  unstoppabledomains: [NameResolutionNode!]!
  ens: [NameResolutionNode!]!
  fio: [NameResolutionNode!]!
}

type NameResolutionNode {
  rootNode: NameResolutionRootNode!;
  hash: String
  name: String
  label: String
  address: String
  state: NameResolutionNodeStates!
  zone: NameResolutionNodeZones!
  guardianSignature: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  fioChainCode: String!
  fioTokenCode: String!
}

type NameResolutionRootNode {
  hash: String!
  name: String!
  state: NameResolutionRootNodeStates!;
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NativeCurrenciesItem {
  chainId: Float!
  decimals: Float!
  logoURI: String!
  name: String!
  symbol: String!
}

type Network {
  chainId: Int!
  name: NetworkNames!
  nativeCurrency: String!
}

type Nft {
  amount: Int!
  image: String
  name: String
  tokenId: String!
}

type NftCollection {
  balance: Float!
  contractAddress: String!
  contractName: String
  contractSymbol: String
  items: [Nft!]!
  nftVersion: String
  tokenType: TokenTypes!
}

type NftList {
  currentPage: Int!
  items: [NftCollection!]!
  nextPage: Int
  total: Int
}

type Notification {
  payload: JSONObject
  recipient: String!
  type: NotificationTypes!
}

type P2PPaymentChannel {
  committedAmount: BigNumber!
  createdAt: DateTime!
  endangered: Boolean!
  hash: String!
  latestPayment: P2PPaymentChannelPayment
  recipient: String!
  sender: String!
  state: P2PPaymentChannelStates!
  token: String
  totalAmount: BigNumber!
  uid: String!
  updatedAt: DateTime!
}

type P2PPaymentChannelPayment {
  blockNumber: Int!
  createdAt: DateTime!
  guardianSignature: String
  senderSignature: String
  state: P2PPaymentChannelPaymentStates!
  totalAmount: BigNumber!
  updatedAt: DateTime!
  value: BigNumber!
}

type P2PPaymentChannelPayments {
  currentPage: Int!
  items: [P2PPaymentChannelPayment!]!
  nextPage: Int
  total: Int
}

type P2PPaymentChannels {
  currentPage: Int!
  items: [P2PPaymentChannel!]!
  nextPage: Int
  total: Int
}

type P2PPaymentDeposit {
  address: String!
  availableAmount: BigNumber!
  createdAt: DateTime
  exitState: P2PPaymentDepositExitStates
  latestWithdrawal: P2PPaymentDepositWithdrawal
  lockedAmount: BigNumber!
  owner: String!
  pendingAmount: BigNumber!
  token: String
  totalAmount: BigNumber!
  updatedAt: DateTime
  withdrawAmount: BigNumber!
}

type P2PPaymentDepositWithdrawal {
  createdAt: DateTime!
  guardianSignature: String
  state: P2PPaymentDepositWithdrawalStates!
  totalAmount: BigNumber!
  updatedAt: DateTime!
  value: BigNumber!
}

type P2PPaymentDeposits {
  items: [P2PPaymentDeposit!]!
}

type PaginatedTokens {
  currentPage: Int!
  items: [TokenListToken!]!
  nextPage: Int
  total: Int
}

type PaymentHub {
  address: String!
  createdAt: DateTime
  liquidity: BigNumber!
  token: String
  updatedAt: DateTime
}

type PaymentHubBridge {
  acceptedChainId: Int!
  acceptedToken: String
  createdAt: DateTime
  hub: PaymentHub!
  state: PaymentHubBridgeStates!
  updatedAt: DateTime
}

type PaymentHubBridges {
  currentPage: Int!
  items: [PaymentHubBridge!]!
  nextPage: Int
  total: Int
}

type PaymentHubDeposit {
  createdAt: DateTime
  hub: PaymentHub!
  owner: String!
  totalAmount: BigNumber!
  updatedAt: DateTime
}

type PaymentHubDeposits {
  currentPage: Int!
  items: [PaymentHubDeposit!]!
  nextPage: Int
  total: Int
}

type PaymentHubPayment {
  createdAt: DateTime!
  hash: String!
  hub: PaymentHub!
  recipient: String
  sender: String
  value: BigNumber!
}

type PaymentHubPayments {
  currentPage: Int!
  items: [PaymentHubPayment!]!
  nextPage: Int
  total: Int
}

type PaymentHubs {
  currentPage: Int!
  items: [PaymentHub!]!
  nextPage: Int
  total: Int
}

type ProjectPublic {
  address: String!
  createdAt: DateTime
  endpoint: String!
  id: Int!
  key: String!
  owner: Int!
  privateKey: String!
  state: ProjectStates!
  updatedAt: DateTime
}

type ProjectResponse {
  data: JSONObject
}

type Query {
  account(account: String!, chainId: Int): Account
  accountBalances(account: String!, chainId: Int, tokens: [String!] = [], provider: String!): AccountBalances!
  accountInvestments(account: String!, chainId: Int, apps: [String!] = [], provider: String!) : AccountInvestments!
  netCurveBalances(account: String!, chainIds: [Int!]) : NetCurveBalances!
  accountMember(account: String!, chainId: Int, member: String!): AccountMember
  accountMembers(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): AccountMembers!
  accountSettings(account: String!, chainId: Int): AccountSettings
  accountTokenList(account: String!, chainId: Int, name: String): TokenListPublic
  accountTotalBalances(account: String!, chainId: Int, currency: Currencies!): AccountTotalBalances
  accounts(chainId: Int, limit: Int = 10, page: Int = 1): Accounts!
  altalixTransactionURL(
    address: String!
    buyAmount: Float
    buyCurrency: String!
    chainId: Int
    sellAmount: Float
    sellCurrency: String!
  ): String!
  blockStats(chainId: Int): BlockStats!
  defaultNetwork: Network!
  delayTransactionOptions: [Int!]!
  ensAddressesLookup(chainId: Int, names: [String!] = []): ENSAddresses!
  ensNamesLookup(addresses: [String!] = [], chainId: Int): ENSNames!
  ensNode(chainId: Int, nameOrHashOrAddress: String!): ENSNode
  ensNodeOwner(chainId: Int, name: String!): String
  ensRootNode(chainId: Int, name: String!): ENSRootNode
  ensRootNodes(chainId: Int): ENSRootNodes!
  exchangeOffers(
    account: String!
    chainId: Int
    fromAmount: BigNumber!
    fromTokenAddress: String!
    toTokenAddress: String!
  ): ExchangeOffers!
  exchangeSupportedAssets(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): PaginatedTokens!
  findBridgeRoutes(
    amount: BigNumber!
    fromAsset: String!
    fromChainId: Int!
    toAsset: String!
    toChainId: Int!
  ): [MovrRoute!]!
  gatewayBatch(chainId: Int, hash: String!): GatewayBatch
  gatewayBatches(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): GatewayBatches!
  gatewayGasInfo(chainId: Int): GatewayGasInfo!
  gatewayPendingBatches(account: String!, chainId: Int, limit: Int = 10, page: Int = 1): GatewayBatches!
  gatewaySenders(chainId: Int): GatewaySenders!
  gatewaySupportedToken(chainId: Int, token: String!): GatewaySupportedToken
  gatewaySupportedTokens(chainId: Int): GatewaySupportedTokens!
  gatewayTransaction(chainId: Int, hash: String!): GatewayTransaction
  getContractAbi(address: String!, chainId: Int): JSONObject
  isTokenOnTokenList(chainId: Int, name: String, token: String!): Boolean!
  tokenDetails(chainId: Int, tokenAddress: String!, provider: String): TokenDetails!
  historicalTokenPrice(chainId: Int, tokenAddress: String!, provider: String, timePeriod: String): HistoricalTokenPrices!
  poolsActivity(chainId: Int, tokenAddress: String!, provider: String, page: Int, type: String): PoolsActivities!
  numberOfTransactions(chainId: Int, tokenAddress: String!, provider: String): NumberOfTransactions!
  tradingHistory(chainId: Int, tokenAddress: String!, provider: String, page: Int): TradingHistories!
  marketDetails(chainId: Int, tokenAddress: String!, provider: String, timePeriod: String!): MarketDetails!
  resolveName(chainId: Int, name: String!): NameResolutionsNodes
  nativeCurrencies: NativeCurrencies!
  nftList(account: String!, chainId: Int): NftList!
  p2pPaymentChannel(chainId: Int, hash: String!): P2PPaymentChannel
  p2pPaymentChannelPayments(chainId: Int, channel: String!, limit: Int = 10, page: Int = 1): P2PPaymentChannelPayments!
  p2pPaymentChannels(
    chainId: Int
    limit: Int = 10
    page: Int = 1
    senderOrRecipient: String!
    token: String
    uncommittedOnly: Boolean
  ): P2PPaymentChannels!
  paymentHub(chainId: Int, hub: String!, token: String): PaymentHub
  paymentHubBridge(
    acceptedChainId: Int!
    acceptedToken: String
    chainId: Int
    hub: String!
    token: String
  ): PaymentHubBridge
  paymentHubBridges(
    acceptedChainId: Int
    chainId: Int
    hub: String!
    limit: Int = 10
    page: Int = 1
    token: String
  ): PaymentHubBridges!
  paymentHubDeposit(chainId: Int, hub: String!, owner: String!, token: String): PaymentHubDeposit
  paymentHubDeposits(
    chainId: Int
    hub: String!
    limit: Int = 10
    owner: String!
    page: Int = 1
    tokens: [String!] = []
  ): PaymentHubDeposits!
  paymentHubPayment(hash: String!): PaymentHubPayment
  paymentHubPayments(
    chainId: Int
    hub: String!
    limit: Int = 10
    owner: String!
    page: Int = 1
    senderOrRecipient: String
    token: String
  ): PaymentHubPayments!
  paymentHubs(chainId: Int, hub: String, limit: Int = 10, page: Int = 1, token: String): PaymentHubs
  project(chainId: Int, key: String!): ProjectPublic
  supportedBridges: SupportedBridges!
  supportedNetworks: [Network!]!
  tokenList(chainId: Int, name: String): TokenListPublic
  tokenLists(chainId: Int): TokenLists!
  transaction(chainId: Int, hash: String!): Transaction
  transactions(account: String!, chainId: Int, noCache: Boolean): Transactions!
  validateENSNode(address: String!, chainId: Int, name: String!): Boolean!
  wyreExchangeRates(chainId: Int): String!
  wyreOrderReservation(
    amount: String!
    chainId: Int
    city: String
    country: String
    dest: String!
    destCurrency: String!
    email: String
    failureRedirectUrl: String
    firstName: String
    lastName: String
    lockFields: [String!]!
    paymentMethod: String
    phone: String
    postalCode: String
    redirectUrl: String
    sourceCurrency: String!
    state: String
  ): String!
}

type SendTransaction {
  data: String
  to: String!
  value: BigNumber
}

type Session {
  account: Account!
  token: String!
  ttl: Int!
}

type Subscription {
  newNotification(address: String!, chainId: Int): Notification
}

type SupportedBridge {
  bridgeName: String!
}

type SupportedBridges {
  items: [SupportedBridge!]!
}

type TokenListPublic {
  chainId: Float!
  createdAt: DateTime!
  endpoint: String!
  id: Float!
  isDefault: Boolean!
  name: String!
  tokens: [TokenListToken!]
  updatedAt: DateTime!
  useInExchangeModule: Boolean!
}

type TokenListToken {
  address: String!
  chainId: Float!
  decimals: Float
  logoURI: String
  name: String
  symbol: String
}

type TokenDetails {
  usdPrice: number!
  tokenAddress: string!
  liquidityUSD: number!
  liquidityUSDChangePercentage24h: number!
  holders?: number!
  supply?: number!
  priceChangePercentage24h: number!
  tradingVolume: number!
  tradingVolumeChangePercentage: number!
}

type HistoricalTokenPrice {
  usdPrice: number!
  tokenAddress: string!
  timestamp: number!
}

type HistoricalTokenPrices {
  items: [HistoricalTokenPrice!]!
}

type PoolsActivityTokensInOut {
  symbol: string!
  amm: string!
  network: string!
  priceUSD: number!
  priceETH: number!
  amount: number!
}

type PoolsActivity {
  amm: string!
  transactionAddress: string!
  timestamp: number!
  amountUSD: number!
  transactionType: string!
  tokensIn: [PoolsActivityTokensInOut!]!
  tokensOut: [PoolsActivityTokensInOut!]!
}

type PoolsActivities {
  items: [PoolsActivity!]!
}

type NumberOfTransactions {
  totalTransactions: number!
}

type TradingHistory {
  amm: string!
  direction: string!
  transactionAddress: string!
  timestamp: number!
  amountUSD: number!
  walletAddress: string!
  tokensIn: [PoolsActivityTokensInOut!]!
  tokensOut: [PoolsActivityTokensInOut!]!
}

type TradingHistories {
  items: [TradingHistory!]!
}

type MarketDetails {
  id: string!
  symbol: string!
  name: string!
  image?: string!
  marketCap: number!
  allTimeHigh?: number!
  allTimeHighTimestamp?: string!
  allTimeLow?: number!
  allTimeLowTimestamp?: string!
  fullyDilutedValuation: number!
  priceChangePercentage1h: number!
  priceChangePercentage24h: number!
  priceChangePercentage7d: number!
  priceChangePercentage1m: number!
  priceChangePercentage1y?: number!
}

type TokenLists {
  items: [TokenListPublic!]!
}

type Transaction {
  asset: TransactionAsset
  batch: JSONObject
  blockExplorerUrl: String
  blockHash: String
  blockNumber: Float
  chainId: Int!
  contractMethodCalled: String
  cumulativeGasUsed: Float
  direction: TransactionDirections
  from: String!
  gasLimit: Float
  gasPrice: BigNumber
  gasUsed: Float
  hash: String!
  id: Int
  input: String
  internalTransactions: JSONObject
  internalTransactionsFetched: Boolean!
  logs: JSONObject
  logsBloom: String
  logsTrimmed: Boolean
  mainTransactionDataFetched: Boolean!
  nonce: Float
  status: TransactionStatuses
  timestamp: Float
  to: String!
  transactionIndex: Float
  value: BigNumber
}

type TransactionAsset {
  category: TransactionAssetCategories
  contract: String
  decimal: Int
  decimals: Int
  from: String
  name: String
  symbol: String
  to: String
  tokenId: BigNumber
  type: TokenTypes
  value: BigNumber
}

type TransactionLog {
  address: String!
  data: String!
  decoded: TransactionLogDecoded
  topics: [String!]!
}

type TransactionLogDecoded {
  name: String!
  params: JSONObject
  signature: String!
}

type Transactions {
  currentPage: Int!
  items: [Transaction!]!
  nextPage: Int
  total: Int
}

enum AccountMemberStates {
  Added
  Removed
}

enum AccountMemberStores {
  AccountOwnerRegistry
  PersonalAccountRegistry
}

enum AccountMemberTypes {
  Owner
}

enum AccountProofStates {
  Added
  Removed
}

enum AccountStates {
  Deployed
  UnDeployed
}

enum AccountStores {
  PersonalAccountRegistry
}

enum AccountTotalBalancesCategories {
  Deposits
  Investments
  LiquidityPools
  Rewards
}

enum AccountTypes {
  Contract
  Key
}

enum Currencies {
  EUR
  GBP
  USD
}

enum ENSNodeStates {
  Claimed
  Reserved
}

enum ENSNodeZones {
  CNS
  ENS
  ZNS
}

enum ENSRootNodeStates {
  Released
  Submitted
  Verified
}

enum ExchangeProviders {
  Aave
  Honeyswap
  OneInch
  PoolTogether
  Rari
  Sushiswap
  Synthetix
  Uniswap
  Paraswap
}

enum GatewayBatchStates {
  Canceled
  Delayed
  Queued
  Reverted
  Sending
  Sent
}

enum GatewayKnownOps {
  WithdrawP2PDeposit
}

enum GatewaySenderStates {
  Busy
  Ready
}

enum GatewayTransactionStates {
  Canceled
  Canceling
  Replaced
  Reverted
  Sending
  Sent
}

enum NameResolutionNodeStates {
  Reserved
  Claimed
}

enum NameResolutionNodeZones {
  ENS
  UNS
  ZNS
  FIO
}

enum NameResolutionRootNodeStates {
  Submitted
  Verified
  Released
}

enum NetworkNames {
  Aurora
  AuroraTest
  Bsc
  BscTest
  Etherspot
  Fantom
  FantomTest
  Goerli
  LocalA
  LocalB
  LocalH
  Mainnet
  Matic
  Mumbai
  Chiado
  Xdai
  Optimism
  ArbitrumTest
  Arbitrum
  Moonbeam
  Moonbase
  Fuse
  FuseSparknet
  Celo
  CeloTest
  ArbitrumNova
  ArbitrumNitro
}

enum NotificationTypes {
  AccountMemberCreated
  AccountMemberUpdated
  AccountUpdated
  Blocknative
  ENSNodeCreated
  ENSNodeUpdated
  GatewayBatchCreated
  GatewayBatchUpdated
  P2PPaymentChannelCreated
  P2PPaymentChannelUpdated
  P2PPaymentDepositCreated
  P2PPaymentDepositUpdated
  PaymentHubBridgeCreated
  PaymentHubBridgeUpdated
  PaymentHubCreated
  PaymentHubDepositCreated
  PaymentHubDepositUpdated
  PaymentHubPaymentCreated
  PaymentHubUpdated
  TransactionUpdated
}

enum P2PPaymentChannelPaymentStates {
  Committed
  Expired
  Reserved
  Signed
}

enum P2PPaymentChannelStates {
  Opened
  Signed
}

enum P2PPaymentDepositExitStates {
  Completed
  Rejected
  Requested
}

enum P2PPaymentDepositWithdrawalStates {
  Signed
  Withdrawn
}

enum PaymentHubBridgeStates {
  Active
  Inactive
}

enum ProjectStates {
  Accepted
  New
  Rejected
}

enum TokenTypes {
  Erc1155
  Erc20
  Erc721
  Native
}

enum TransactionAssetCategories {
  External
  Internal
  Token
}

enum TransactionDirections {
  Receiver
  Sender
}

enum TransactionStatuses {
  Completed
  Pending
  Reverted
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"BigNumber.js"
scalar BigNumber

"JSONObject"
scalar JSONObject
